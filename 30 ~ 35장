# 30장 Date

## 30.1 Date 생성자 함수  
- Date는 생성자 함수다. Date로 생성한 Date 객체는 내부적으로 날짜와 시간을 나타내는 정수값을 갖는다.  
- 1970년 1월 1일 00:00:00(UTC)을 기점으로 Date가 나타내는 날짜와 시간까지의 밀리초를 나타낸다.  
- 생성법  
	- new Date() :현재 날짜와 시간  
	- new Date(milliseconds) : 숫자타입으로 인수 전달 시 시작(1970) 시점부터 인수의 밀리세컨드 뒤의 날짜와 시간  
	- new Date(dateString) : 문자열로 전달 시 지정된 날짜와 시간에 맞게 생성된다(Date.parse 메서드로 해석 가능해야 한다)  
	- new Date(year, month\[, day, hour, minute, second, millisecond\]) : 인수가 두개 이상일 경우, 인수가 해당 순서대로 입력된다.

## 30.2 Date 메서드  
- [Date.now](Date.now)  
	- 현재 시간까지 경과한 밀리초 숫자 반환  
- Date.parse  
	- 문자열을 시간으로 파싱하여 밀리초를 숫자로 반환한다.  
- Date.UTC  
	- new Date(year, month, ...)에 대응  
- Date.prototype.getFullYear  
- Date.prototype.setFullYear  
- Date.prototype.getMonth  
- Date.prototype.setMonth  
- Date.prototype.getDate : 날짜  
- Date.prototype.setDate  
- Date.prototype.getDay : 요일  
- Date.prototype.getHours  
- Date.prototype.setHours  
- Date.prototype.getMinutes  
- Date.prototype.setMinutes  
- Date.prototype.getSeconds  
- Date.prototype.setSeconds  
- Date.prototype.getMilliseconds  
- Date.prototype.setMilliseconds  
- Date.prototype.getTime : 기점부터의 밀리초  
- Date.prototype.setTime  
- Date.prototype.getTimezoneOffset : 지정된 locale 타임존에 대한 시간차이를 구한다.  
- Date.prototype.toDateString  
- Date.prototype.toTimeString  
- Date.prototype.toISOString : 2020-07-24T03:30:00.000Z 형식  
- Date.prototype.toLocaleString : 인수로 전달한 Locale 기준 날짜시간 스트링  
- Date.prototype.toLocaleTimeString : 인수로 전달한 Locale 기준 시간 스트링  
## 30.3 Date를 활용한 시계 예제

---

# 31장 RegExp

## 31.1 정규 표현식이란?  
- 일정한 패턴을 가진 문자열의 집합을 표현하기 위한 형식 언어  
- 문자열을 대상으로 하는 패턴 매칭 기능 제공  
## 31.2 정규 표현식의 생성  
- 정규표현식 리터럴  
- / 사이에 패턴을 입력하고 뒤에 플래그를 입력한다  
- RegExp 생성자 함수  
- 인수로 패턴과 선택적으로 플래그를 받는다.  
- 동적으로 생성 가능하다는 이점이 있다.  
## 31.3 RegExp 메서드  
- RegExp.prototype.exec  
- 인수로 받은 문자열에 패턴을 검색하여 배열로 반환  
- RegExp.prototype.test  
- 불리언으로 반환  
- RegExp.prototype.match  
- 배열로 반환하는데 exec과 달리 g 플래그가 있다면 모든 매칭 결과를 반환한다.  
## 31.4 플래그  
- i : 대소문자 무시  
- g : 패턴과 일치하는 모든 문자열 전역 검색  
- m : 문자열의 행이 바뀌더라도 패턴 검색 계속  
- 여러개 동시 설정 가능  
## 31.5 패턴  
- 문자열
- 임의의 문자열 (.)  
- 반복 검색 ({})  
- OR 검색  
## 31.6 자주 사용하는 정규표현식
- 특정 단어로 시작(\^)
- 특정 단어로 끝($)
- 숫자로만 이루어졌는지(^\d+$)
- 하나 이상의 공백으로 시작하는지(^\[\s\]+)
- 아이디로 사용 가능 여부 (^[A-Za-z0-9]{4,16}$)
- 메일 주소 형식/휴대폰번호/특수문자 포함 여부 등


---

# 32장 String  
## 32.1 String 생성자 함수
- new 연산자와 함께 호출하여 String 인스턴스를 생성하거나 new 없이 호출하여 String 래퍼 객체 생성 가능
- 인덱스와 length를 갖는 유사 배열 객체이면서 이터러블이다.
## 32.2 length 프로퍼티
- 문자열의 문자 개수를 반환한다.
## 32.3 String 메서드
- String도 원본 배열에 부수효과를 일으키는 메서드와 아닌 메서드가 있으나 String은 변경 불가능한 원시값이기 때문에 String 래퍼 객체도 읽기 전용 객체로 제공된다.
- String.prototype.indexOf
	- 문자열을 검색해 첫번째 인수 or -1 반환
- String.prototype.search
	- 정규표현식을 검색
- String.prototype.includes
	- 포함여부 T/F
- String.prototype.startsWith
	- 2번째 인수로 시작할 인덱스 지정 가능
- String.prototype.endsWith
	- 2번째 인수로 끝날 인덱스 지정 가능
- String.prototype.charAt
- String.prototype.substring 
	- Array.prototype.slice와 유사하나
	- 첫번째 인수 > 두번째인 경우, 두 인수는 교환
	- 인수 < 0 또는 NaN인 경우 0으로 취급
	- 인수 > 문자열의 길이인 경우 문자열의 길이로 취급
- String.prototype.slice
	- substring에서 음수를 허용한 버전
	- 음수일 경우 뒤에서부터 시작한다.
- String.prototype.toUpperCase => 대문자
- String.prototype.toLowerCase => 소문자
- String.prototype.trim 
- String.prototype.repeat  => 인수로 전달 받은  정수만큼 반복
- String.prototype.replace
	- 첫 번째 인수로 전달받은 문자열 또는 정규 표현식을 검색하여 두 번째 인수로 치환
	- 정규식 뒤에 g를 붙일 경우 전체를 치환한다
	- $&를 이용해 검색된 문자열을 재사용 가능하다.
	- 두 번째 인수로 치환 함수를 전달할 수 있다.
		- (match) => {}     // match는 검색된 문자열
- String.prototype.split
	- 문자열 또는 정규 표현식을 검색하여 문자열을 구분한 후 분리된 문자열로 배열 생성
	- 인수 생략 시 전체 문자열을 하나의 요소로 가진 배열 생성
	- 두 번째 인수로 배열의 길이를 지정 가능(잘린 요소는 버려짐)


---

# 33장 7번째 데이터 타입 Symbol  
## 33.1 심벌이란?  
- 변경 불가능한 원시타입  
- 충돌 위험이 없는 유일한 프로퍼티 키를 만들기 위함  
## 33.2 심벌 값의 생성  
- Symbol 함수  
	-  심벌을 생성하는 리터럴은 없고 함수를 이용해 생성
	- Symbol 함수는 non-constructor
	- 심벌도 래퍼 객체를 생성하는 엄연한 원시값
- Symbol.for / Symbol.keyFor 메서드
	- Symbol.for 함수를 이용하면 인수로 받은 문자열을 키로 이용하여 키와 심벌 값의 쌍들이 저장되어 있는 Symbol 전역 레지스트리에서 해당 키와 일치하는 심벌 값을 검색하여 생성 혹은 반환한다.
	- Symbol.keyFor를 이용하면 인수로 주어진 심벌에 대한 전역 레지스트리 상의 키값을 반환한다.
## 33.3 심벌과 상수
- 의미가 없고 상수 이름 자체에 의미가 있는 경우(enum?) 상수 값의 변경과 중복을 안전하게 처리하기 위해 심벌 값 사용 가능
## 33.4 심벌과 프로퍼티 키
- 심벌은 객체의 키 값으로 사용 가능하며 유일무이한 값이므로 다른 프로퍼티 키와 절대 충돌하지 않는 키를 생성 가능하다 (어디에 쓰지??)
## 33.5 심벌과 프로퍼티 은닉
- 심벌을 프로퍼티 키로 사용하여 생성한 프로퍼티는 for ... in 문이나 Object.keys / Object.getOwnPropertyNames 메서드로 찾을 수 없다. 그래서 은닉을 하기 위해 사용 가능하다.
## 33.6 심벌과 표준 빌트인 객체 확장
- 표준 빌트인 객체에 사용자 정의 메서드를 직접 추가하여 확장하는 것은 권장되지 않는다.
- ~~그러니까 넘어가겠다~~
- 이유는 미래 추가될 메서드와 중복 가능할 위험 때문이므로 심벌을 사용해 확장하면 안전하다.
	- 근데 그럴 경우 어찌됐건 심벌을 호출하는 로직이 들어가야하는데 그냥 유틸함수로 만드는거랑 사용성에 차이가 없지 않을까
## 33.7 Well-known Symbol
- 자바스크립트가 기본 제공하는 빌트인 심벌 값을 Well-known Symbol이라 부른다.
- 자바스크립트 내부 알고리즘에 사용된다.
- Array, String, Map, Set, TypedArray 등과 같이 for ... of문으로 순회 가능한 빌트인 이터러블은 Symbol.iterator를 키로 갖는 메서드를 가지며, 이를 호출하면 이터레이터를 반환하도록 규정되어 있다.
	- 이를 이용해 일반 객체를 이터러블처럼 동작하도록 구현하고 싶다면 이터레이션 프로토콜을 따라 \[Symbol.iterator\]() {}의 매서드를 객체에 추가하고 이터레이터를 반환하도록 구현하면 된다.

---

# 34장 이터러블

## 34.1 이터레이션 프로토콜
- ES6에서 도입되었고 순회 가능한 데이터 컬렉션(자료구조)을 만들기 위해 ECMAScript 사양에 정의된 규칙이다.
- 이터러블 프로토콜
	- Symbol.iterator를 프로퍼티 키로 사용한 메서드를 직접 구현하거나 프로토타입 체인을 통해 상속 받아 호출하면 이터레이터 프로토콜을 준수한 이터레이터를 반환해야 한다.
	- 이 프로토콜을 준수한 객체를 이터러블이라고 한다.
	- for ... of문, spread 문법, 배열 디스럭처링 할당의 대상으로 사용할 수 있게된다
- 이터레이터 프로토콜
	- next 메서드를 소유하며 next 메서드를 호출하면 이터러블을 순회하며 value와 done 프로퍼티를 갖는 이터레이터 result 객체를 반환한다.
	- 이터러블 요소를 탐색하기 위한 포인터 역할을 한다.

## 34.2 빌트인 이터러블
- Array, String, Map, Set, TypedArray, arguments, DOM 컬렉션
## 34.3 for ... of 문
- 이터러블을 순회하며 이터러블의 요소를 변수에 할당한다.
- 내부적으로 next 메서드를 호출하여 이터러블을 순회하며 next 메서드가 반환한 결과 객체의 value값을 변수에 할당한다. 이는 done의 값이 true가 될 때까지 반복된다.
## 34.4 이터러블과 유사 배열 객체
- 유사 배열 객체는 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length 프로퍼티를 갖는 객체를 말한다. 
- 보통의 유사 배열 객체에는 이터러블 프로토콜을 준수하지 않아 순회할 수 없다. 하지만 arguments, NodeList, HTMLCollection은 유사 배열 객체이면서 이터러블이므로 순회가 가능하다.
## 34.5 이터레이션 프로토콜의 필요성
- 수 많은 데이터 소스들을 데이터 공급자라고 할 수 있고 for ... of, 스프레드, 배열 디스트럭쳐링 등을 데이터 소비자라고 한다면 다양한 방식으로 순회방법이 구현됐다면 소비자가 처리해야할 방식이 많아지게 된다. 
- 이터레이션 프로토콜은 데이터 소비자와 공급자를 연결하는 인터페이스 역할을 한다.
## 34.6 사용자 정의 이터러블
- 이터러블 프로토콜을 준수하도록 \[Symbol.iterator\] 메서드를 정의하자
- 이터러블은 지연평가를 하기 때문에 무한히 데이터를 생성하도록 하여도 필요할 때까지만 next를 호출하여 멈출 수 있다.


---

# 35장 스프레드 문법  
- 뭉친 여러 값들의 집합을 펼쳐서 개별적인 값들의 목록으로 만든다.  
- 값이 아닌 값의 목록이기 때문에 하나의 변수에 할당하는 것은 불가능하다.  
- 쉼표로 구분한 값의 목록에서 사용 가능하다.  
	- 함수 호출문의 인수 목록  
	- 배열 리터럴의 요소 목록  
	- 객체 리터럴의 프로퍼티 목록  
## 35.1 함수 호출문의 인수 목록에서 사용하는 경우  
- Rest 파라미터와 반대로 배열을 펼쳐 함수의 인수로 하나 씩 넣는다.
## 35.2 배열 리터럴 내부에서 사용하는 경우  
- 이터러블을 펼쳐 순서대로 배열의 요소로 사용한다.
## 35.3 객체 리터럴 내부에서 사용하는 경우
- 배열과 유사하게 키와 밸류 쌍을 펼쳐서 객체의 키-밸류가 입력된다.
- 같은 키가 중복될 경우 뒤의 쌍의 밸류가 덮어 씌운다.
